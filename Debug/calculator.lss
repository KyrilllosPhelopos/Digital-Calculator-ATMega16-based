
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000020ee  00002182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  00002192  2**0
                  ALLOC
  3 .stab         00001b0c  00000000  00000000  00002194  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ca8  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006841  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000772c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000084dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000863c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000088c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <main>
      8a:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CALCULATOR_getOperand>:
#include"lcd.h"
#include<util/delay.h>

char operator=0;
uint16 CALCULATOR_getOperand(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	63 97       	sbiw	r28, 0x13	; 19
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint16 temp =0 , operand=0 ;
     b5a:	1b 8a       	std	Y+19, r1	; 0x13
     b5c:	1a 8a       	std	Y+18, r1	; 0x12
     b5e:	19 8a       	std	Y+17, r1	; 0x11
     b60:	18 8a       	std	Y+16, r1	; 0x10

	uint8 valid = TRUE ;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	8f 87       	std	Y+15, r24	; 0x0f
     b66:	bd c0       	rjmp	.+378    	; 0xce2 <CALCULATOR_getOperand+0x19c>

	while(valid)
	{

		temp = KEYPAD_getPressedKey();
     b68:	0e 94 2d 0a 	call	0x145a	; 0x145a <KEYPAD_getPressedKey>
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	9b 8b       	std	Y+19, r25	; 0x13
     b72:	8a 8b       	std	Y+18, r24	; 0x12

		if(temp =='/'|| temp =='*'||temp =='-'||temp =='+')
     b74:	8a 89       	ldd	r24, Y+18	; 0x12
     b76:	9b 89       	ldd	r25, Y+19	; 0x13
     b78:	8f 32       	cpi	r24, 0x2F	; 47
     b7a:	91 05       	cpc	r25, r1
     b7c:	79 f0       	breq	.+30     	; 0xb9c <CALCULATOR_getOperand+0x56>
     b7e:	8a 89       	ldd	r24, Y+18	; 0x12
     b80:	9b 89       	ldd	r25, Y+19	; 0x13
     b82:	8a 32       	cpi	r24, 0x2A	; 42
     b84:	91 05       	cpc	r25, r1
     b86:	51 f0       	breq	.+20     	; 0xb9c <CALCULATOR_getOperand+0x56>
     b88:	8a 89       	ldd	r24, Y+18	; 0x12
     b8a:	9b 89       	ldd	r25, Y+19	; 0x13
     b8c:	8d 32       	cpi	r24, 0x2D	; 45
     b8e:	91 05       	cpc	r25, r1
     b90:	29 f0       	breq	.+10     	; 0xb9c <CALCULATOR_getOperand+0x56>
     b92:	8a 89       	ldd	r24, Y+18	; 0x12
     b94:	9b 89       	ldd	r25, Y+19	; 0x13
     b96:	8b 32       	cpi	r24, 0x2B	; 43
     b98:	91 05       	cpc	r25, r1
     b9a:	49 f4       	brne	.+18     	; 0xbae <CALCULATOR_getOperand+0x68>
		{
			operator = temp ;
     b9c:	8a 89       	ldd	r24, Y+18	; 0x12
     b9e:	80 93 70 00 	sts	0x0070, r24
			LCD_displayCharacter(operator) ;
     ba2:	80 91 70 00 	lds	r24, 0x0070
     ba6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_displayCharacter>
			valid =FALSE;
     baa:	1f 86       	std	Y+15, r1	; 0x0f
     bac:	28 c0       	rjmp	.+80     	; 0xbfe <CALCULATOR_getOperand+0xb8>

		}
		else if(temp =='=')
     bae:	8a 89       	ldd	r24, Y+18	; 0x12
     bb0:	9b 89       	ldd	r25, Y+19	; 0x13
     bb2:	8d 33       	cpi	r24, 0x3D	; 61
     bb4:	91 05       	cpc	r25, r1
     bb6:	29 f4       	brne	.+10     	; 0xbc2 <CALCULATOR_getOperand+0x7c>
		{
			LCD_displayCharacter('=');
     bb8:	8d e3       	ldi	r24, 0x3D	; 61
     bba:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_displayCharacter>
			valid =FALSE;
     bbe:	1f 86       	std	Y+15, r1	; 0x0f
     bc0:	1e c0       	rjmp	.+60     	; 0xbfe <CALCULATOR_getOperand+0xb8>
		}
		else if (temp ==13)
     bc2:	8a 89       	ldd	r24, Y+18	; 0x12
     bc4:	9b 89       	ldd	r25, Y+19	; 0x13
     bc6:	8d 30       	cpi	r24, 0x0D	; 13
     bc8:	91 05       	cpc	r25, r1
     bca:	19 f4       	brne	.+6      	; 0xbd2 <CALCULATOR_getOperand+0x8c>
		{
			LCD_clearScreen();
     bcc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <LCD_clearScreen>
     bd0:	16 c0       	rjmp	.+44     	; 0xbfe <CALCULATOR_getOperand+0xb8>
		}
		else
		{
			LCD_intgerToString(temp);
     bd2:	8a 89       	ldd	r24, Y+18	; 0x12
     bd4:	9b 89       	ldd	r25, Y+19	; 0x13
     bd6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_intgerToString>
			operand=10*operand + temp;
     bda:	88 89       	ldd	r24, Y+16	; 0x10
     bdc:	99 89       	ldd	r25, Y+17	; 0x11
     bde:	9c 01       	movw	r18, r24
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	c9 01       	movw	r24, r18
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	28 0f       	add	r18, r24
     bf0:	39 1f       	adc	r19, r25
     bf2:	8a 89       	ldd	r24, Y+18	; 0x12
     bf4:	9b 89       	ldd	r25, Y+19	; 0x13
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	99 8b       	std	Y+17, r25	; 0x11
     bfc:	88 8b       	std	Y+16, r24	; 0x10
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	aa e7       	ldi	r26, 0x7A	; 122
     c04:	b3 e4       	ldi	r27, 0x43	; 67
     c06:	8b 87       	std	Y+11, r24	; 0x0b
     c08:	9c 87       	std	Y+12, r25	; 0x0c
     c0a:	ad 87       	std	Y+13, r26	; 0x0d
     c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c10:	7c 85       	ldd	r23, Y+12	; 0x0c
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	4a e7       	ldi	r20, 0x7A	; 122
     c1c:	53 e4       	ldi	r21, 0x43	; 67
     c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	8f 83       	std	Y+7, r24	; 0x07
     c28:	98 87       	std	Y+8, r25	; 0x08
     c2a:	a9 87       	std	Y+9, r26	; 0x09
     c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e8       	ldi	r20, 0x80	; 128
     c3c:	5f e3       	ldi	r21, 0x3F	; 63
     c3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c42:	88 23       	and	r24, r24
     c44:	2c f4       	brge	.+10     	; 0xc50 <CALCULATOR_getOperand+0x10a>
		__ticks = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	3f c0       	rjmp	.+126    	; 0xcce <CALCULATOR_getOperand+0x188>
	else if (__tmp > 65535)
     c50:	6f 81       	ldd	r22, Y+7	; 0x07
     c52:	78 85       	ldd	r23, Y+8	; 0x08
     c54:	89 85       	ldd	r24, Y+9	; 0x09
     c56:	9a 85       	ldd	r25, Y+10	; 0x0a
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	3f ef       	ldi	r19, 0xFF	; 255
     c5c:	4f e7       	ldi	r20, 0x7F	; 127
     c5e:	57 e4       	ldi	r21, 0x47	; 71
     c60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c64:	18 16       	cp	r1, r24
     c66:	4c f5       	brge	.+82     	; 0xcba <CALCULATOR_getOperand+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c68:	6b 85       	ldd	r22, Y+11	; 0x0b
     c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e2       	ldi	r20, 0x20	; 32
     c76:	51 e4       	ldi	r21, 0x41	; 65
     c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9e 83       	std	Y+6, r25	; 0x06
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <CALCULATOR_getOperand+0x16a>
     c92:	89 e1       	ldi	r24, 0x19	; 25
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <CALCULATOR_getOperand+0x158>
     ca2:	9c 83       	std	Y+4, r25	; 0x04
     ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	69 f7       	brne	.-38     	; 0xc92 <CALCULATOR_getOperand+0x14c>
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <CALCULATOR_getOperand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cba:	6f 81       	ldd	r22, Y+7	; 0x07
     cbc:	78 85       	ldd	r23, Y+8	; 0x08
     cbe:	89 85       	ldd	r24, Y+9	; 0x09
     cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	9e 83       	std	Y+6, r25	; 0x06
     ccc:	8d 83       	std	Y+5, r24	; 0x05
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <CALCULATOR_getOperand+0x194>
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
{
	uint16 temp =0 , operand=0 ;

	uint8 valid = TRUE ;

	while(valid)
     ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce4:	88 23       	and	r24, r24
     ce6:	09 f0       	breq	.+2      	; 0xcea <CALCULATOR_getOperand+0x1a4>
     ce8:	3f cf       	rjmp	.-386    	; 0xb68 <CALCULATOR_getOperand+0x22>
			LCD_intgerToString(temp);
			operand=10*operand + temp;
		}
		_delay_ms(250);
	}
	return operand;
     cea:	88 89       	ldd	r24, Y+16	; 0x10
     cec:	99 89       	ldd	r25, Y+17	; 0x11
}
     cee:	63 96       	adiw	r28, 0x13	; 19
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <CALCULATOR_CALCULATE>:

void CALCULATOR_CALCULATE(uint16 first , uint16 second)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	28 97       	sbiw	r28, 0x08	; 8
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	9c 83       	std	Y+4, r25	; 0x04
     d16:	8b 83       	std	Y+3, r24	; 0x03
     d18:	7e 83       	std	Y+6, r23	; 0x06
     d1a:	6d 83       	std	Y+5, r22	; 0x05
	uint16 result;
	if(operator==0)
     d1c:	80 91 70 00 	lds	r24, 0x0070
     d20:	88 23       	and	r24, r24
     d22:	29 f4       	brne	.+10     	; 0xd2e <CALCULATOR_CALCULATE+0x2e>
	{
		LCD_displayString("ERROR!");
     d24:	80 e6       	ldi	r24, 0x60	; 96
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_displayString>
     d2c:	4f c0       	rjmp	.+158    	; 0xdcc <CALCULATOR_CALCULATE+0xcc>
		return;
	}
	else
	{
		switch(operator)
     d2e:	80 91 70 00 	lds	r24, 0x0070
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	38 87       	std	Y+8, r19	; 0x08
     d38:	2f 83       	std	Y+7, r18	; 0x07
     d3a:	4f 81       	ldd	r20, Y+7	; 0x07
     d3c:	58 85       	ldd	r21, Y+8	; 0x08
     d3e:	4b 32       	cpi	r20, 0x2B	; 43
     d40:	51 05       	cpc	r21, r1
     d42:	c1 f1       	breq	.+112    	; 0xdb4 <CALCULATOR_CALCULATE+0xb4>
     d44:	8f 81       	ldd	r24, Y+7	; 0x07
     d46:	98 85       	ldd	r25, Y+8	; 0x08
     d48:	8c 32       	cpi	r24, 0x2C	; 44
     d4a:	91 05       	cpc	r25, r1
     d4c:	34 f4       	brge	.+12     	; 0xd5a <CALCULATOR_CALCULATE+0x5a>
     d4e:	2f 81       	ldd	r18, Y+7	; 0x07
     d50:	38 85       	ldd	r19, Y+8	; 0x08
     d52:	2a 32       	cpi	r18, 0x2A	; 42
     d54:	31 05       	cpc	r19, r1
     d56:	b1 f0       	breq	.+44     	; 0xd84 <CALCULATOR_CALCULATE+0x84>
     d58:	35 c0       	rjmp	.+106    	; 0xdc4 <CALCULATOR_CALCULATE+0xc4>
     d5a:	4f 81       	ldd	r20, Y+7	; 0x07
     d5c:	58 85       	ldd	r21, Y+8	; 0x08
     d5e:	4d 32       	cpi	r20, 0x2D	; 45
     d60:	51 05       	cpc	r21, r1
     d62:	f9 f0       	breq	.+62     	; 0xda2 <CALCULATOR_CALCULATE+0xa2>
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	98 85       	ldd	r25, Y+8	; 0x08
     d68:	8f 32       	cpi	r24, 0x2F	; 47
     d6a:	91 05       	cpc	r25, r1
     d6c:	59 f5       	brne	.+86     	; 0xdc4 <CALCULATOR_CALCULATE+0xc4>
		{
		case '/':
			result = first/second;
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	2d 81       	ldd	r18, Y+5	; 0x05
     d74:	3e 81       	ldd	r19, Y+6	; 0x06
     d76:	b9 01       	movw	r22, r18
     d78:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__udivmodhi4>
     d7c:	cb 01       	movw	r24, r22
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	20 c0       	rjmp	.+64     	; 0xdc4 <CALCULATOR_CALCULATE+0xc4>
			break;
		case '*':
			result = first * second;
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	2d 81       	ldd	r18, Y+5	; 0x05
     d8a:	3e 81       	ldd	r19, Y+6	; 0x06
     d8c:	ac 01       	movw	r20, r24
     d8e:	42 9f       	mul	r20, r18
     d90:	c0 01       	movw	r24, r0
     d92:	43 9f       	mul	r20, r19
     d94:	90 0d       	add	r25, r0
     d96:	52 9f       	mul	r21, r18
     d98:	90 0d       	add	r25, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	11 c0       	rjmp	.+34     	; 0xdc4 <CALCULATOR_CALCULATE+0xc4>
			break;
		case '-':
			result = first - second;
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	2d 81       	ldd	r18, Y+5	; 0x05
     da8:	3e 81       	ldd	r19, Y+6	; 0x06
     daa:	82 1b       	sub	r24, r18
     dac:	93 0b       	sbc	r25, r19
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <CALCULATOR_CALCULATE+0xc4>
			break;
		case '+':
			result = first + second;
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	2d 81       	ldd	r18, Y+5	; 0x05
     dba:	3e 81       	ldd	r19, Y+6	; 0x06
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	LCD_intgerToString (result);
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_intgerToString>
}
     dcc:	28 96       	adiw	r28, 0x08	; 8
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <GPIO_setupPinDirection+0x6>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <GPIO_setupPinDirection+0x8>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	6a 83       	std	Y+2, r22	; 0x02
     df0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	08 f0       	brcs	.+2      	; 0xdfa <GPIO_setupPinDirection+0x1c>
     df8:	d5 c0       	rjmp	.+426    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	84 30       	cpi	r24, 0x04	; 4
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <GPIO_setupPinDirection+0x24>
     e00:	d1 c0       	rjmp	.+418    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3d 83       	std	Y+5, r19	; 0x05
     e0a:	2c 83       	std	Y+4, r18	; 0x04
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <GPIO_setupPinDirection+0x3a>
     e16:	43 c0       	rjmp	.+134    	; 0xe9e <GPIO_setupPinDirection+0xc0>
     e18:	2c 81       	ldd	r18, Y+4	; 0x04
     e1a:	3d 81       	ldd	r19, Y+5	; 0x05
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	2c f4       	brge	.+10     	; 0xe2c <GPIO_setupPinDirection+0x4e>
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	9d 81       	ldd	r25, Y+5	; 0x05
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	71 f0       	breq	.+28     	; 0xe46 <GPIO_setupPinDirection+0x68>
     e2a:	bc c0       	rjmp	.+376    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
     e2c:	2c 81       	ldd	r18, Y+4	; 0x04
     e2e:	3d 81       	ldd	r19, Y+5	; 0x05
     e30:	22 30       	cpi	r18, 0x02	; 2
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <GPIO_setupPinDirection+0x5a>
     e36:	5f c0       	rjmp	.+190    	; 0xef6 <GPIO_setupPinDirection+0x118>
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	9d 81       	ldd	r25, Y+5	; 0x05
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <GPIO_setupPinDirection+0x66>
     e42:	85 c0       	rjmp	.+266    	; 0xf4e <GPIO_setupPinDirection+0x170>
     e44:	af c0       	rjmp	.+350    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	a1 f4       	brne	.+40     	; 0xe74 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e4c:	aa e3       	ldi	r26, 0x3A	; 58
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ea e3       	ldi	r30, 0x3A	; 58
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <GPIO_setupPinDirection+0x8c>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <GPIO_setupPinDirection+0x88>
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	98 c0       	rjmp	.+304    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e74:	aa e3       	ldi	r26, 0x3A	; 58
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea e3       	ldi	r30, 0x3A	; 58
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_setupPinDirection+0xb4>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_setupPinDirection+0xb0>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	83 c0       	rjmp	.+262    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	a1 f4       	brne	.+40     	; 0xecc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ea4:	a7 e3       	ldi	r26, 0x37	; 55
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e7 e3       	ldi	r30, 0x37	; 55
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <GPIO_setupPinDirection+0xe4>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <GPIO_setupPinDirection+0xe0>
     ec6:	84 2b       	or	r24, r20
     ec8:	8c 93       	st	X, r24
     eca:	6c c0       	rjmp	.+216    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ecc:	a7 e3       	ldi	r26, 0x37	; 55
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e7 e3       	ldi	r30, 0x37	; 55
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <GPIO_setupPinDirection+0x10c>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <GPIO_setupPinDirection+0x108>
     eee:	80 95       	com	r24
     ef0:	84 23       	and	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	57 c0       	rjmp	.+174    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	a1 f4       	brne	.+40     	; 0xf24 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     efc:	a4 e3       	ldi	r26, 0x34	; 52
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e3       	ldi	r30, 0x34	; 52
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_setupPinDirection+0x13c>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_setupPinDirection+0x138>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	40 c0       	rjmp	.+128    	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f24:	a4 e3       	ldi	r26, 0x34	; 52
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e4 e3       	ldi	r30, 0x34	; 52
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <GPIO_setupPinDirection+0x164>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <GPIO_setupPinDirection+0x160>
     f46:	80 95       	com	r24
     f48:	84 23       	and	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	2b c0       	rjmp	.+86     	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	a1 f4       	brne	.+40     	; 0xf7c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f54:	a1 e3       	ldi	r26, 0x31	; 49
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e1 e3       	ldi	r30, 0x31	; 49
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_setupPinDirection+0x194>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_setupPinDirection+0x190>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <GPIO_setupPinDirection+0x1bc>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <GPIO_setupPinDirection+0x1b8>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <GPIO_writePin+0x6>
     fba:	00 d0       	rcall	.+0      	; 0xfbc <GPIO_writePin+0x8>
     fbc:	0f 92       	push	r0
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	6a 83       	std	Y+2, r22	; 0x02
     fc6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 30       	cpi	r24, 0x08	; 8
     fcc:	08 f0       	brcs	.+2      	; 0xfd0 <GPIO_writePin+0x1c>
     fce:	d5 c0       	rjmp	.+426    	; 0x117a <GPIO_writePin+0x1c6>
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <GPIO_writePin+0x24>
     fd6:	d1 c0       	rjmp	.+418    	; 0x117a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3d 83       	std	Y+5, r19	; 0x05
     fe0:	2c 83       	std	Y+4, r18	; 0x04
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <GPIO_writePin+0x3a>
     fec:	43 c0       	rjmp	.+134    	; 0x1074 <GPIO_writePin+0xc0>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	2c f4       	brge	.+10     	; 0x1002 <GPIO_writePin+0x4e>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	71 f0       	breq	.+28     	; 0x101c <GPIO_writePin+0x68>
    1000:	bc c0       	rjmp	.+376    	; 0x117a <GPIO_writePin+0x1c6>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <GPIO_writePin+0x5a>
    100c:	5f c0       	rjmp	.+190    	; 0x10cc <GPIO_writePin+0x118>
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <GPIO_writePin+0x66>
    1018:	85 c0       	rjmp	.+266    	; 0x1124 <GPIO_writePin+0x170>
    101a:	af c0       	rjmp	.+350    	; 0x117a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	a1 f4       	brne	.+40     	; 0x104a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1022:	ab e3       	ldi	r26, 0x3B	; 59
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	eb e3       	ldi	r30, 0x3B	; 59
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <GPIO_writePin+0x8c>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <GPIO_writePin+0x88>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	98 c0       	rjmp	.+304    	; 0x117a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <GPIO_writePin+0xb4>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <GPIO_writePin+0xb0>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	83 c0       	rjmp	.+262    	; 0x117a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	a1 f4       	brne	.+40     	; 0x10a2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    107a:	a8 e3       	ldi	r26, 0x38	; 56
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e3       	ldi	r30, 0x38	; 56
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <GPIO_writePin+0xe4>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <GPIO_writePin+0xe0>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	6c c0       	rjmp	.+216    	; 0x117a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10a2:	a8 e3       	ldi	r26, 0x38	; 56
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e8 e3       	ldi	r30, 0x38	; 56
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <GPIO_writePin+0x10c>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <GPIO_writePin+0x108>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	57 c0       	rjmp	.+174    	; 0x117a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10d2:	a5 e3       	ldi	r26, 0x35	; 53
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e3       	ldi	r30, 0x35	; 53
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_writePin+0x13c>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_writePin+0x138>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	40 c0       	rjmp	.+128    	; 0x117a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10fa:	a5 e3       	ldi	r26, 0x35	; 53
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e3       	ldi	r30, 0x35	; 53
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <GPIO_writePin+0x164>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <GPIO_writePin+0x160>
    111c:	80 95       	com	r24
    111e:	84 23       	and	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	2b c0       	rjmp	.+86     	; 0x117a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	a1 f4       	brne	.+40     	; 0x1152 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    112a:	a2 e3       	ldi	r26, 0x32	; 50
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e2 e3       	ldi	r30, 0x32	; 50
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_writePin+0x194>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_writePin+0x190>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	14 c0       	rjmp	.+40     	; 0x117a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1152:	a2 e3       	ldi	r26, 0x32	; 50
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e2 e3       	ldi	r30, 0x32	; 50
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <GPIO_writePin+0x1bc>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <GPIO_writePin+0x1b8>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <GPIO_readPin+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <GPIO_readPin+0x8>
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	8a 83       	std	Y+2, r24	; 0x02
    119a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    119c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	88 30       	cpi	r24, 0x08	; 8
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <GPIO_readPin+0x1c>
    11a4:	84 c0       	rjmp	.+264    	; 0x12ae <GPIO_readPin+0x124>
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <GPIO_readPin+0x24>
    11ac:	80 c0       	rjmp	.+256    	; 0x12ae <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3d 83       	std	Y+5, r19	; 0x05
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	4c 81       	ldd	r20, Y+4	; 0x04
    11ba:	5d 81       	ldd	r21, Y+5	; 0x05
    11bc:	41 30       	cpi	r20, 0x01	; 1
    11be:	51 05       	cpc	r21, r1
    11c0:	79 f1       	breq	.+94     	; 0x1220 <GPIO_readPin+0x96>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	91 05       	cpc	r25, r1
    11ca:	34 f4       	brge	.+12     	; 0x11d8 <GPIO_readPin+0x4e>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	21 15       	cp	r18, r1
    11d2:	31 05       	cpc	r19, r1
    11d4:	69 f0       	breq	.+26     	; 0x11f0 <GPIO_readPin+0x66>
    11d6:	6b c0       	rjmp	.+214    	; 0x12ae <GPIO_readPin+0x124>
    11d8:	4c 81       	ldd	r20, Y+4	; 0x04
    11da:	5d 81       	ldd	r21, Y+5	; 0x05
    11dc:	42 30       	cpi	r20, 0x02	; 2
    11de:	51 05       	cpc	r21, r1
    11e0:	b9 f1       	breq	.+110    	; 0x1250 <GPIO_readPin+0xc6>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <GPIO_readPin+0x64>
    11ec:	49 c0       	rjmp	.+146    	; 0x1280 <GPIO_readPin+0xf6>
    11ee:	5f c0       	rjmp	.+190    	; 0x12ae <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11f0:	e9 e3       	ldi	r30, 0x39	; 57
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_readPin+0x7e>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_readPin+0x7a>
    120c:	ca 01       	movw	r24, r20
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	90 70       	andi	r25, 0x00	; 0
    1212:	88 23       	and	r24, r24
    1214:	19 f0       	breq	.+6      	; 0x121c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	49 c0       	rjmp	.+146    	; 0x12ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    121c:	19 82       	std	Y+1, r1	; 0x01
    121e:	47 c0       	rjmp	.+142    	; 0x12ae <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1220:	e6 e3       	ldi	r30, 0x36	; 54
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a9 01       	movw	r20, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_readPin+0xae>
    1234:	55 95       	asr	r21
    1236:	47 95       	ror	r20
    1238:	8a 95       	dec	r24
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_readPin+0xaa>
    123c:	ca 01       	movw	r24, r20
    123e:	81 70       	andi	r24, 0x01	; 1
    1240:	90 70       	andi	r25, 0x00	; 0
    1242:	88 23       	and	r24, r24
    1244:	19 f0       	breq	.+6      	; 0x124c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	31 c0       	rjmp	.+98     	; 0x12ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	2f c0       	rjmp	.+94     	; 0x12ae <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1250:	e3 e3       	ldi	r30, 0x33	; 51
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GPIO_readPin+0xde>
    1264:	55 95       	asr	r21
    1266:	47 95       	ror	r20
    1268:	8a 95       	dec	r24
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GPIO_readPin+0xda>
    126c:	ca 01       	movw	r24, r20
    126e:	81 70       	andi	r24, 0x01	; 1
    1270:	90 70       	andi	r25, 0x00	; 0
    1272:	88 23       	and	r24, r24
    1274:	19 f0       	breq	.+6      	; 0x127c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	19 c0       	rjmp	.+50     	; 0x12ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    127c:	19 82       	std	Y+1, r1	; 0x01
    127e:	17 c0       	rjmp	.+46     	; 0x12ae <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1280:	e0 e3       	ldi	r30, 0x30	; 48
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <GPIO_readPin+0x10e>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <GPIO_readPin+0x10a>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	90 70       	andi	r25, 0x00	; 0
    12a2:	88 23       	and	r24, r24
    12a4:	19 f0       	breq	.+6      	; 0x12ac <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12ac:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <GPIO_setupPortDirection+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <GPIO_setupPortDirection+0x8>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	84 30       	cpi	r24, 0x04	; 4
    12d4:	90 f5       	brcc	.+100    	; 0x133a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3c 83       	std	Y+4, r19	; 0x04
    12de:	2b 83       	std	Y+3, r18	; 0x03
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	d1 f0       	breq	.+52     	; 0x131e <GPIO_setupPortDirection+0x5e>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	2c f4       	brge	.+10     	; 0x12fe <GPIO_setupPortDirection+0x3e>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	61 f0       	breq	.+24     	; 0x1314 <GPIO_setupPortDirection+0x54>
    12fc:	1e c0       	rjmp	.+60     	; 0x133a <GPIO_setupPortDirection+0x7a>
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	3c 81       	ldd	r19, Y+4	; 0x04
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <GPIO_setupPortDirection+0x68>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	91 05       	cpc	r25, r1
    1310:	81 f0       	breq	.+32     	; 0x1332 <GPIO_setupPortDirection+0x72>
    1312:	13 c0       	rjmp	.+38     	; 0x133a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1314:	ea e3       	ldi	r30, 0x3A	; 58
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	0e c0       	rjmp	.+28     	; 0x133a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    131e:	e7 e3       	ldi	r30, 0x37	; 55
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	09 c0       	rjmp	.+18     	; 0x133a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
    1330:	04 c0       	rjmp	.+8      	; 0x133a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1332:	e1 e3       	ldi	r30, 0x31	; 49
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
			break;
		}
	}
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <GPIO_writePort+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <GPIO_writePort+0x8>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	90 f5       	brcc	.+100    	; 0x13c2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3c 83       	std	Y+4, r19	; 0x04
    1366:	2b 83       	std	Y+3, r18	; 0x03
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	d1 f0       	breq	.+52     	; 0x13a6 <GPIO_writePort+0x5e>
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	3c 81       	ldd	r19, Y+4	; 0x04
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	2c f4       	brge	.+10     	; 0x1386 <GPIO_writePort+0x3e>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	61 f0       	breq	.+24     	; 0x139c <GPIO_writePort+0x54>
    1384:	1e c0       	rjmp	.+60     	; 0x13c2 <GPIO_writePort+0x7a>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	81 f0       	breq	.+32     	; 0x13b0 <GPIO_writePort+0x68>
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <GPIO_writePort+0x72>
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    139c:	eb e3       	ldi	r30, 0x3B	; 59
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13a6:	e8 e3       	ldi	r30, 0x38	; 56
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 83       	st	Z, r24
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13b0:	e5 e3       	ldi	r30, 0x35	; 53
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13ba:	e2 e3       	ldi	r30, 0x32	; 50
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <GPIO_readPort+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <GPIO_readPort+0x8>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13de:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	90 f5       	brcc	.+100    	; 0x144a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3c 83       	std	Y+4, r19	; 0x04
    13ee:	2b 83       	std	Y+3, r18	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	d1 f0       	breq	.+52     	; 0x142e <GPIO_readPort+0x5e>
    13fa:	2b 81       	ldd	r18, Y+3	; 0x03
    13fc:	3c 81       	ldd	r19, Y+4	; 0x04
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <GPIO_readPort+0x3e>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	61 f0       	breq	.+24     	; 0x1424 <GPIO_readPort+0x54>
    140c:	1e c0       	rjmp	.+60     	; 0x144a <GPIO_readPort+0x7a>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	81 f0       	breq	.+32     	; 0x1438 <GPIO_readPort+0x68>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	81 f0       	breq	.+32     	; 0x1442 <GPIO_readPort+0x72>
    1422:	13 c0       	rjmp	.+38     	; 0x144a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1424:	e9 e3       	ldi	r30, 0x39	; 57
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	0e c0       	rjmp	.+28     	; 0x144a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    142e:	e6 e3       	ldi	r30, 0x36	; 54
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	09 c0       	rjmp	.+18     	; 0x144a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1438:	e3 e3       	ldi	r30, 0x33	; 51
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	04 c0       	rjmp	.+8      	; 0x144a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1442:	e0 e3       	ldi	r30, 0x30	; 48
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <KEYPAD_getPressedKey+0x6>
    1460:	0f 92       	push	r0
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1466:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1468:	1b 82       	std	Y+3, r1	; 0x03
    146a:	43 c0       	rjmp	.+134    	; 0x14f2 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	98 2f       	mov	r25, r24
    1478:	9c 5f       	subi	r25, 0xFC	; 252
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	69 2f       	mov	r22, r25
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 ef 06 	call	0xdde	; 0xdde <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9c 01       	movw	r18, r24
    148c:	2c 5f       	subi	r18, 0xFC	; 252
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 c0       	rjmp	.+4      	; 0x149a <KEYPAD_getPressedKey+0x40>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	2a 95       	dec	r18
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <KEYPAD_getPressedKey+0x3c>
    149e:	80 95       	com	r24
    14a0:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	69 81       	ldd	r22, Y+1	; 0x01
    14a6:	0e 94 a4 09 	call	0x1348	; 0x1348 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    14aa:	1a 82       	std	Y+2, r1	; 0x02
    14ac:	1c c0       	rjmp	.+56     	; 0x14e6 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	6a 81       	ldd	r22, Y+2	; 0x02
    14b2:	0e 94 c5 08 	call	0x118a	; 0x118a <GPIO_readPin>
    14b6:	88 23       	and	r24, r24
    14b8:	99 f4       	brne	.+38     	; 0x14e0 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	98 2f       	mov	r25, r24
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	89 0f       	add	r24, r25
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	08 f3       	brcs	.-62     	; 0x14ae <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	8b 83       	std	Y+3, r24	; 0x03
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	08 f4       	brcc	.+2      	; 0x14fa <KEYPAD_getPressedKey+0xa0>
    14f8:	b9 cf       	rjmp	.-142    	; 0x146c <KEYPAD_getPressedKey+0x12>
    14fa:	b6 cf       	rjmp	.-148    	; 0x1468 <KEYPAD_getPressedKey+0xe>

000014fc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    150a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3c 83       	std	Y+4, r19	; 0x04
    1514:	2b 83       	std	Y+3, r18	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	88 30       	cpi	r24, 0x08	; 8
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1520:	70 c0       	rjmp	.+224    	; 0x1602 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	29 30       	cpi	r18, 0x09	; 9
    1528:	31 05       	cpc	r19, r1
    152a:	5c f5       	brge	.+86     	; 0x1582 <KEYPAD_4x4_adjustKeyNumber+0x86>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1536:	59 c0       	rjmp	.+178    	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0xee>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	25 30       	cpi	r18, 0x05	; 5
    153e:	31 05       	cpc	r19, r1
    1540:	9c f4       	brge	.+38     	; 0x1568 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	91 05       	cpc	r25, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <KEYPAD_4x4_adjustKeyNumber+0x52>
    154c:	48 c0       	rjmp	.+144    	; 0x15de <KEYPAD_4x4_adjustKeyNumber+0xe2>
    154e:	2b 81       	ldd	r18, Y+3	; 0x03
    1550:	3c 81       	ldd	r19, Y+4	; 0x04
    1552:	23 30       	cpi	r18, 0x03	; 3
    1554:	31 05       	cpc	r19, r1
    1556:	0c f0       	brlt	.+2      	; 0x155a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1558:	45 c0       	rjmp	.+138    	; 0x15e4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1564:	39 c0       	rjmp	.+114    	; 0x15d8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1566:	67 c0       	rjmp	.+206    	; 0x1636 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1568:	2b 81       	ldd	r18, Y+3	; 0x03
    156a:	3c 81       	ldd	r19, Y+4	; 0x04
    156c:	26 30       	cpi	r18, 0x06	; 6
    156e:	31 05       	cpc	r19, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1572:	41 c0       	rjmp	.+130    	; 0x15f6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	87 30       	cpi	r24, 0x07	; 7
    157a:	91 05       	cpc	r25, r1
    157c:	0c f0       	brlt	.+2      	; 0x1580 <KEYPAD_4x4_adjustKeyNumber+0x84>
    157e:	3e c0       	rjmp	.+124    	; 0x15fc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1580:	37 c0       	rjmp	.+110    	; 0x15f0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	2c 30       	cpi	r18, 0x0C	; 12
    1588:	31 05       	cpc	r19, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <KEYPAD_4x4_adjustKeyNumber+0x92>
    158c:	46 c0       	rjmp	.+140    	; 0x161a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	8d 30       	cpi	r24, 0x0D	; 13
    1594:	91 05       	cpc	r25, r1
    1596:	5c f4       	brge	.+22     	; 0x15ae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	2a 30       	cpi	r18, 0x0A	; 10
    159e:	31 05       	cpc	r19, r1
    15a0:	b1 f1       	breq	.+108    	; 0x160e <KEYPAD_4x4_adjustKeyNumber+0x112>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	8b 30       	cpi	r24, 0x0B	; 11
    15a8:	91 05       	cpc	r25, r1
    15aa:	a4 f5       	brge	.+104    	; 0x1614 <KEYPAD_4x4_adjustKeyNumber+0x118>
    15ac:	2d c0       	rjmp	.+90     	; 0x1608 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    15ae:	2b 81       	ldd	r18, Y+3	; 0x03
    15b0:	3c 81       	ldd	r19, Y+4	; 0x04
    15b2:	2e 30       	cpi	r18, 0x0E	; 14
    15b4:	31 05       	cpc	r19, r1
    15b6:	b9 f1       	breq	.+110    	; 0x1626 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	8e 30       	cpi	r24, 0x0E	; 14
    15be:	91 05       	cpc	r25, r1
    15c0:	7c f1       	brlt	.+94     	; 0x1620 <KEYPAD_4x4_adjustKeyNumber+0x124>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	2f 30       	cpi	r18, 0x0F	; 15
    15c8:	31 05       	cpc	r19, r1
    15ca:	79 f1       	breq	.+94     	; 0x162a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	80 31       	cpi	r24, 0x10	; 16
    15d2:	91 05       	cpc	r25, r1
    15d4:	69 f1       	breq	.+90     	; 0x1630 <KEYPAD_4x4_adjustKeyNumber+0x134>
    15d6:	2f c0       	rjmp	.+94     	; 0x1636 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    15d8:	87 e0       	ldi	r24, 0x07	; 7
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	2e c0       	rjmp	.+92     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    15de:	88 e0       	ldi	r24, 0x08	; 8
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	2b c0       	rjmp	.+86     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    15e4:	89 e0       	ldi	r24, 0x09	; 9
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	28 c0       	rjmp	.+80     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    15ea:	8f e2       	ldi	r24, 0x2F	; 47
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	25 c0       	rjmp	.+74     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    15f0:	84 e0       	ldi	r24, 0x04	; 4
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	22 c0       	rjmp	.+68     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    15f6:	85 e0       	ldi	r24, 0x05	; 5
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	1f c0       	rjmp	.+62     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    15fc:	86 e0       	ldi	r24, 0x06	; 6
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	1c c0       	rjmp	.+56     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1602:	8a e2       	ldi	r24, 0x2A	; 42
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	19 c0       	rjmp	.+50     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	16 c0       	rjmp	.+44     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	13 c0       	rjmp	.+38     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	10 c0       	rjmp	.+32     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    161a:	8d e2       	ldi	r24, 0x2D	; 45
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	0d c0       	rjmp	.+26     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1620:	8d e0       	ldi	r24, 0x0D	; 13
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	0a c0       	rjmp	.+20     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1626:	19 82       	std	Y+1, r1	; 0x01
    1628:	08 c0       	rjmp	.+16     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    162a:	8d e3       	ldi	r24, 0x3D	; 61
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	05 c0       	rjmp	.+10     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1630:	8b e2       	ldi	r24, 0x2B	; 43
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	02 c0       	rjmp	.+4      	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	64 e0       	ldi	r22, 0x04	; 4
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	0e 94 ef 06 	call	0xdde	; 0xdde <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	65 e0       	ldi	r22, 0x05	; 5
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 ef 06 	call	0xdde	; 0xdde <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	66 e0       	ldi	r22, 0x06	; 6
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 ef 06 	call	0xdde	; 0xdde <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	6f ef       	ldi	r22, 0xFF	; 255
    1674:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1678:	88 e3       	ldi	r24, 0x38	; 56
    167a:	0e 94 48 0b 	call	0x1690	; 0x1690 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    167e:	8c e0       	ldi	r24, 0x0C	; 12
    1680:	0e 94 48 0b 	call	0x1690	; 0x1690 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	0e 94 48 0b 	call	0x1690	; 0x1690 <LCD_sendCommand>
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	e9 97       	sbiw	r28, 0x39	; 57
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	64 e0       	ldi	r22, 0x04	; 4
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	65 e0       	ldi	r22, 0x05	; 5
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	bf e3       	ldi	r27, 0x3F	; 63
    16c2:	8d ab       	std	Y+53, r24	; 0x35
    16c4:	9e ab       	std	Y+54, r25	; 0x36
    16c6:	af ab       	std	Y+55, r26	; 0x37
    16c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	7e a9       	ldd	r23, Y+54	; 0x36
    16ce:	8f a9       	ldd	r24, Y+55	; 0x37
    16d0:	98 ad       	ldd	r25, Y+56	; 0x38
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a e7       	ldi	r20, 0x7A	; 122
    16d8:	53 e4       	ldi	r21, 0x43	; 67
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	89 ab       	std	Y+49, r24	; 0x31
    16e4:	9a ab       	std	Y+50, r25	; 0x32
    16e6:	ab ab       	std	Y+51, r26	; 0x33
    16e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ea:	69 a9       	ldd	r22, Y+49	; 0x31
    16ec:	7a a9       	ldd	r23, Y+50	; 0x32
    16ee:	8b a9       	ldd	r24, Y+51	; 0x33
    16f0:	9c a9       	ldd	r25, Y+52	; 0x34
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	98 ab       	std	Y+48, r25	; 0x30
    1708:	8f a7       	std	Y+47, r24	; 0x2f
    170a:	3f c0       	rjmp	.+126    	; 0x178a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    170c:	69 a9       	ldd	r22, Y+49	; 0x31
    170e:	7a a9       	ldd	r23, Y+50	; 0x32
    1710:	8b a9       	ldd	r24, Y+51	; 0x33
    1712:	9c a9       	ldd	r25, Y+52	; 0x34
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6d a9       	ldd	r22, Y+53	; 0x35
    1726:	7e a9       	ldd	r23, Y+54	; 0x36
    1728:	8f a9       	ldd	r24, Y+55	; 0x37
    172a:	98 ad       	ldd	r25, Y+56	; 0x38
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	98 ab       	std	Y+48, r25	; 0x30
    174a:	8f a7       	std	Y+47, r24	; 0x2f
    174c:	0f c0       	rjmp	.+30     	; 0x176c <LCD_sendCommand+0xdc>
    174e:	89 e1       	ldi	r24, 0x19	; 25
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9e a7       	std	Y+46, r25	; 0x2e
    1754:	8d a7       	std	Y+45, r24	; 0x2d
    1756:	8d a5       	ldd	r24, Y+45	; 0x2d
    1758:	9e a5       	ldd	r25, Y+46	; 0x2e
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <LCD_sendCommand+0xca>
    175e:	9e a7       	std	Y+46, r25	; 0x2e
    1760:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8f a5       	ldd	r24, Y+47	; 0x2f
    1764:	98 a9       	ldd	r25, Y+48	; 0x30
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8f a5       	ldd	r24, Y+47	; 0x2f
    176e:	98 a9       	ldd	r25, Y+48	; 0x30
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <LCD_sendCommand+0xbe>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	69 a9       	ldd	r22, Y+49	; 0x31
    1778:	7a a9       	ldd	r23, Y+50	; 0x32
    177a:	8b a9       	ldd	r24, Y+51	; 0x33
    177c:	9c a9       	ldd	r25, Y+52	; 0x34
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	98 ab       	std	Y+48, r25	; 0x30
    1788:	8f a7       	std	Y+47, r24	; 0x2f
    178a:	8f a5       	ldd	r24, Y+47	; 0x2f
    178c:	98 a9       	ldd	r25, Y+48	; 0x30
    178e:	9c a7       	std	Y+44, r25	; 0x2c
    1790:	8b a7       	std	Y+43, r24	; 0x2b
    1792:	8b a5       	ldd	r24, Y+43	; 0x2b
    1794:	9c a5       	ldd	r25, Y+44	; 0x2c
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_sendCommand+0x106>
    179a:	9c a7       	std	Y+44, r25	; 0x2c
    179c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	66 e0       	ldi	r22, 0x06	; 6
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a0 e8       	ldi	r26, 0x80	; 128
    17ae:	bf e3       	ldi	r27, 0x3F	; 63
    17b0:	8f a3       	std	Y+39, r24	; 0x27
    17b2:	98 a7       	std	Y+40, r25	; 0x28
    17b4:	a9 a7       	std	Y+41, r26	; 0x29
    17b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	6f a1       	ldd	r22, Y+39	; 0x27
    17ba:	78 a5       	ldd	r23, Y+40	; 0x28
    17bc:	89 a5       	ldd	r24, Y+41	; 0x29
    17be:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a e7       	ldi	r20, 0x7A	; 122
    17c6:	53 e4       	ldi	r21, 0x43	; 67
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8b a3       	std	Y+35, r24	; 0x23
    17d2:	9c a3       	std	Y+36, r25	; 0x24
    17d4:	ad a3       	std	Y+37, r26	; 0x25
    17d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d8:	6b a1       	ldd	r22, Y+35	; 0x23
    17da:	7c a1       	ldd	r23, Y+36	; 0x24
    17dc:	8d a1       	ldd	r24, Y+37	; 0x25
    17de:	9e a1       	ldd	r25, Y+38	; 0x26
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <LCD_sendCommand+0x16a>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9a a3       	std	Y+34, r25	; 0x22
    17f6:	89 a3       	std	Y+33, r24	; 0x21
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    17fa:	6b a1       	ldd	r22, Y+35	; 0x23
    17fc:	7c a1       	ldd	r23, Y+36	; 0x24
    17fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1800:	9e a1       	ldd	r25, Y+38	; 0x26
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	6f a1       	ldd	r22, Y+39	; 0x27
    1814:	78 a5       	ldd	r23, Y+40	; 0x28
    1816:	89 a5       	ldd	r24, Y+41	; 0x29
    1818:	9a a5       	ldd	r25, Y+42	; 0x2a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9a a3       	std	Y+34, r25	; 0x22
    1838:	89 a3       	std	Y+33, r24	; 0x21
    183a:	0f c0       	rjmp	.+30     	; 0x185a <LCD_sendCommand+0x1ca>
    183c:	89 e1       	ldi	r24, 0x19	; 25
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	98 a3       	std	Y+32, r25	; 0x20
    1842:	8f 8f       	std	Y+31, r24	; 0x1f
    1844:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1846:	98 a1       	ldd	r25, Y+32	; 0x20
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_sendCommand+0x1b8>
    184c:	98 a3       	std	Y+32, r25	; 0x20
    184e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	89 a1       	ldd	r24, Y+33	; 0x21
    1852:	9a a1       	ldd	r25, Y+34	; 0x22
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9a a3       	std	Y+34, r25	; 0x22
    1858:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	89 a1       	ldd	r24, Y+33	; 0x21
    185c:	9a a1       	ldd	r25, Y+34	; 0x22
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <LCD_sendCommand+0x1ac>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6b a1       	ldd	r22, Y+35	; 0x23
    1866:	7c a1       	ldd	r23, Y+36	; 0x24
    1868:	8d a1       	ldd	r24, Y+37	; 0x25
    186a:	9e a1       	ldd	r25, Y+38	; 0x26
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9a a3       	std	Y+34, r25	; 0x22
    1876:	89 a3       	std	Y+33, r24	; 0x21
    1878:	89 a1       	ldd	r24, Y+33	; 0x21
    187a:	9a a1       	ldd	r25, Y+34	; 0x22
    187c:	9e 8f       	std	Y+30, r25	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
    1880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1882:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <LCD_sendCommand+0x1f4>
    1888:	9e 8f       	std	Y+30, r25	; 0x1e
    188a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	69 ad       	ldd	r22, Y+57	; 0x39
    1890:	0e 94 a4 09 	call	0x1348	; 0x1348 <GPIO_writePort>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e8       	ldi	r26, 0x80	; 128
    189a:	bf e3       	ldi	r27, 0x3F	; 63
    189c:	89 8f       	std	Y+25, r24	; 0x19
    189e:	9a 8f       	std	Y+26, r25	; 0x1a
    18a0:	ab 8f       	std	Y+27, r26	; 0x1b
    18a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	69 8d       	ldd	r22, Y+25	; 0x19
    18a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	53 e4       	ldi	r21, 0x43	; 67
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8d 8b       	std	Y+21, r24	; 0x15
    18be:	9e 8b       	std	Y+22, r25	; 0x16
    18c0:	af 8b       	std	Y+23, r26	; 0x17
    18c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c4:	6d 89       	ldd	r22, Y+21	; 0x15
    18c6:	7e 89       	ldd	r23, Y+22	; 0x16
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <LCD_sendCommand+0x256>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    18e6:	6d 89       	ldd	r22, Y+21	; 0x15
    18e8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ea:	8f 89       	ldd	r24, Y+23	; 0x17
    18ec:	98 8d       	ldd	r25, Y+24	; 0x18
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1900:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9c 8b       	std	Y+20, r25	; 0x14
    1924:	8b 8b       	std	Y+19, r24	; 0x13
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_sendCommand+0x2b6>
    1928:	89 e1       	ldi	r24, 0x19	; 25
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9a 8b       	std	Y+18, r25	; 0x12
    192e:	89 8b       	std	Y+17, r24	; 0x11
    1930:	89 89       	ldd	r24, Y+17	; 0x11
    1932:	9a 89       	ldd	r25, Y+18	; 0x12
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_sendCommand+0x2a4>
    1938:	9a 8b       	std	Y+18, r25	; 0x12
    193a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8b 89       	ldd	r24, Y+19	; 0x13
    193e:	9c 89       	ldd	r25, Y+20	; 0x14
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8b 89       	ldd	r24, Y+19	; 0x13
    1948:	9c 89       	ldd	r25, Y+20	; 0x14
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_sendCommand+0x298>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6d 89       	ldd	r22, Y+21	; 0x15
    1952:	7e 89       	ldd	r23, Y+22	; 0x16
    1954:	8f 89       	ldd	r24, Y+23	; 0x17
    1956:	98 8d       	ldd	r25, Y+24	; 0x18
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9c 8b       	std	Y+20, r25	; 0x14
    1962:	8b 8b       	std	Y+19, r24	; 0x13
    1964:	8b 89       	ldd	r24, Y+19	; 0x13
    1966:	9c 89       	ldd	r25, Y+20	; 0x14
    1968:	98 8b       	std	Y+16, r25	; 0x10
    196a:	8f 87       	std	Y+15, r24	; 0x0f
    196c:	8f 85       	ldd	r24, Y+15	; 0x0f
    196e:	98 89       	ldd	r25, Y+16	; 0x10
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_sendCommand+0x2e0>
    1974:	98 8b       	std	Y+16, r25	; 0x10
    1976:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	66 e0       	ldi	r22, 0x06	; 6
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e8       	ldi	r26, 0x80	; 128
    1988:	bf e3       	ldi	r27, 0x3F	; 63
    198a:	8b 87       	std	Y+11, r24	; 0x0b
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	ad 87       	std	Y+13, r26	; 0x0d
    1990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a e7       	ldi	r20, 0x7A	; 122
    19a0:	53 e4       	ldi	r21, 0x43	; 67
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	98 87       	std	Y+8, r25	; 0x08
    19ae:	a9 87       	std	Y+9, r26	; 0x09
    19b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <LCD_sendCommand+0x344>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_sendCommand+0x3a4>
    1a16:	89 e1       	ldi	r24, 0x19	; 25
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_sendCommand+0x392>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <LCD_sendCommand+0x386>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_sendCommand+0x3ce>
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1a66:	e9 96       	adiw	r28, 0x39	; 57
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	e9 97       	sbiw	r28, 0x39	; 57
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	64 e0       	ldi	r22, 0x04	; 4
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	65 e0       	ldi	r22, 0x05	; 5
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e8       	ldi	r26, 0x80	; 128
    1aa8:	bf e3       	ldi	r27, 0x3F	; 63
    1aaa:	8d ab       	std	Y+53, r24	; 0x35
    1aac:	9e ab       	std	Y+54, r25	; 0x36
    1aae:	af ab       	std	Y+55, r26	; 0x37
    1ab0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a e7       	ldi	r20, 0x7A	; 122
    1ac0:	53 e4       	ldi	r21, 0x43	; 67
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	89 ab       	std	Y+49, r24	; 0x31
    1acc:	9a ab       	std	Y+50, r25	; 0x32
    1ace:	ab ab       	std	Y+51, r26	; 0x33
    1ad0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1af4:	69 a9       	ldd	r22, Y+49	; 0x31
    1af6:	7a a9       	ldd	r23, Y+50	; 0x32
    1af8:	8b a9       	ldd	r24, Y+51	; 0x33
    1afa:	9c a9       	ldd	r25, Y+52	; 0x34
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b10:	8f a9       	ldd	r24, Y+55	; 0x37
    1b12:	98 ad       	ldd	r25, Y+56	; 0x38
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <LCD_displayCharacter+0xdc>
    1b36:	89 e1       	ldi	r24, 0x19	; 25
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e a7       	std	Y+46, r25	; 0x2e
    1b3c:	8d a7       	std	Y+45, r24	; 0x2d
    1b3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_displayCharacter+0xca>
    1b46:	9e a7       	std	Y+46, r25	; 0x2e
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	98 ab       	std	Y+48, r25	; 0x30
    1b52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b56:	98 a9       	ldd	r25, Y+48	; 0x30
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <LCD_displayCharacter+0xbe>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b60:	7a a9       	ldd	r23, Y+50	; 0x32
    1b62:	8b a9       	ldd	r24, Y+51	; 0x33
    1b64:	9c a9       	ldd	r25, Y+52	; 0x34
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	98 ab       	std	Y+48, r25	; 0x30
    1b70:	8f a7       	std	Y+47, r24	; 0x2f
    1b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b74:	98 a9       	ldd	r25, Y+48	; 0x30
    1b76:	9c a7       	std	Y+44, r25	; 0x2c
    1b78:	8b a7       	std	Y+43, r24	; 0x2b
    1b7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_displayCharacter+0x106>
    1b82:	9c a7       	std	Y+44, r25	; 0x2c
    1b84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	66 e0       	ldi	r22, 0x06	; 6
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8f a3       	std	Y+39, r24	; 0x27
    1b9a:	98 a7       	std	Y+40, r25	; 0x28
    1b9c:	a9 a7       	std	Y+41, r26	; 0x29
    1b9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8b a3       	std	Y+35, r24	; 0x23
    1bba:	9c a3       	std	Y+36, r25	; 0x24
    1bbc:	ad a3       	std	Y+37, r26	; 0x25
    1bbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1be2:	6b a1       	ldd	r22, Y+35	; 0x23
    1be4:	7c a1       	ldd	r23, Y+36	; 0x24
    1be6:	8d a1       	ldd	r24, Y+37	; 0x25
    1be8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_displayCharacter+0x1ca>
    1c24:	89 e1       	ldi	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	98 a3       	std	Y+32, r25	; 0x20
    1c2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_displayCharacter+0x1b8>
    1c34:	98 a3       	std	Y+32, r25	; 0x20
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9a a3       	std	Y+34, r25	; 0x22
    1c40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	89 a1       	ldd	r24, Y+33	; 0x21
    1c44:	9a a1       	ldd	r25, Y+34	; 0x22
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_displayCharacter+0x1ac>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c50:	8d a1       	ldd	r24, Y+37	; 0x25
    1c52:	9e a1       	ldd	r25, Y+38	; 0x26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9a a3       	std	Y+34, r25	; 0x22
    1c5e:	89 a3       	std	Y+33, r24	; 0x21
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	9e 8f       	std	Y+30, r25	; 0x1e
    1c66:	8d 8f       	std	Y+29, r24	; 0x1d
    1c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_displayCharacter+0x1f4>
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	69 ad       	ldd	r22, Y+57	; 0x39
    1c78:	0e 94 a4 09 	call	0x1348	; 0x1348 <GPIO_writePort>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	89 8f       	std	Y+25, r24	; 0x19
    1c86:	9a 8f       	std	Y+26, r25	; 0x1a
    1c88:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a e7       	ldi	r20, 0x7A	; 122
    1c9a:	53 e4       	ldi	r21, 0x43	; 67
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8d 8b       	std	Y+21, r24	; 0x15
    1ca6:	9e 8b       	std	Y+22, r25	; 0x16
    1ca8:	af 8b       	std	Y+23, r26	; 0x17
    1caa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_displayCharacter+0x256>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1cce:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9c 8b       	std	Y+20, r25	; 0x14
    1d0c:	8b 8b       	std	Y+19, r24	; 0x13
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_displayCharacter+0x2b6>
    1d10:	89 e1       	ldi	r24, 0x19	; 25
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	89 8b       	std	Y+17, r24	; 0x11
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_displayCharacter+0x2a4>
    1d20:	9a 8b       	std	Y+18, r25	; 0x12
    1d22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9c 8b       	std	Y+20, r25	; 0x14
    1d2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_displayCharacter+0x298>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	98 8b       	std	Y+16, r25	; 0x10
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 89       	ldd	r25, Y+16	; 0x10
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_displayCharacter+0x2e0>
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	66 e0       	ldi	r22, 0x06	; 6
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 da 07 	call	0xfb4	; 0xfb4 <GPIO_writePin>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	bf e3       	ldi	r27, 0x3F	; 63
    1d72:	8b 87       	std	Y+11, r24	; 0x0b
    1d74:	9c 87       	std	Y+12, r25	; 0x0c
    1d76:	ad 87       	std	Y+13, r26	; 0x0d
    1d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a e7       	ldi	r20, 0x7A	; 122
    1d88:	53 e4       	ldi	r21, 0x43	; 67
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8f 83       	std	Y+7, r24	; 0x07
    1d94:	98 87       	std	Y+8, r25	; 0x08
    1d96:	a9 87       	std	Y+9, r26	; 0x09
    1d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_displayCharacter+0x344>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_displayCharacter+0x3a4>
    1dfe:	89 e1       	ldi	r24, 0x19	; 25
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_displayCharacter+0x392>
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_displayCharacter+0x386>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_displayCharacter+0x3ce>
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1e4e:	e9 96       	adiw	r28, 0x39	; 57
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LCD_displayString+0x6>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	9b 83       	std	Y+3, r25	; 0x03
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e70:	19 82       	std	Y+1, r1	; 0x01
    1e72:	0e c0       	rjmp	.+28     	; 0x1e90 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
    1e84:	80 81       	ld	r24, Z
    1e86:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_displayCharacter>
		i++;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	8f 5f       	subi	r24, 0xFF	; 255
    1e8e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	e2 0f       	add	r30, r18
    1e9e:	f3 1f       	adc	r31, r19
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 23       	and	r24, r24
    1ea4:	39 f7       	brne	.-50     	; 0x1e74 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <LCD_moveCursor+0x6>
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <LCD_moveCursor+0x8>
    1eba:	0f 92       	push	r0
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    1ec2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3d 83       	std	Y+5, r19	; 0x05
    1ecc:	2c 83       	std	Y+4, r18	; 0x04
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	c1 f0       	breq	.+48     	; 0x1f08 <LCD_moveCursor+0x56>
    1ed8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eda:	3d 81       	ldd	r19, Y+5	; 0x05
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	31 05       	cpc	r19, r1
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <LCD_moveCursor+0x3a>
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <LCD_moveCursor+0x50>
    1eea:	19 c0       	rjmp	.+50     	; 0x1f1e <LCD_moveCursor+0x6c>
    1eec:	2c 81       	ldd	r18, Y+4	; 0x04
    1eee:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef0:	22 30       	cpi	r18, 0x02	; 2
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	69 f0       	breq	.+26     	; 0x1f10 <LCD_moveCursor+0x5e>
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	91 05       	cpc	r25, r1
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <LCD_moveCursor+0x66>
    1f00:	0e c0       	rjmp	.+28     	; 0x1f1e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	0b c0       	rjmp	.+22     	; 0x1f1e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	80 5c       	subi	r24, 0xC0	; 192
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	07 c0       	rjmp	.+14     	; 0x1f1e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	80 5f       	subi	r24, 0xF0	; 240
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	80 5b       	subi	r24, 0xB0	; 176
    1f1c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	80 68       	ori	r24, 0x80	; 128
    1f22:	0e 94 48 0b 	call	0x1690	; 0x1690 <LCD_sendCommand>
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <LCD_displayStringRowColumn+0x6>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <LCD_displayStringRowColumn+0x8>
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	6a 83       	std	Y+2, r22	; 0x02
    1f46:	5c 83       	std	Y+4, r21	; 0x04
    1f48:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f4e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_displayString>
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	62 97       	sbiw	r28, 0x12	; 18
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	9a 8b       	std	Y+18, r25	; 0x12
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f80:	89 89       	ldd	r24, Y+17	; 0x11
    1f82:	9a 89       	ldd	r25, Y+18	; 0x12
    1f84:	9e 01       	movw	r18, r28
    1f86:	2f 5f       	subi	r18, 0xFF	; 255
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8a:	b9 01       	movw	r22, r18
    1f8c:	4a e0       	ldi	r20, 0x0A	; 10
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	0e 94 44 10 	call	0x2088	; 0x2088 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f94:	ce 01       	movw	r24, r28
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_displayString>
}
    1f9c:	62 96       	adiw	r28, 0x12	; 18
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	0e 94 48 0b 	call	0x1690	; 0x1690 <LCD_sendCommand>
}
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <main>:
#include"std_types.h"
#include"calculator.h"
#include"lcd.h"

int main()
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <main+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <main+0x8>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	uint16 firstNumber, secondNumber;
	LCD_init();
    1fce:	0e 94 25 0b 	call	0x164a	; 0x164a <LCD_init>
	 while(1)
	 {
		 firstNumber=CALCULATOR_getOperand();
    1fd2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CALCULATOR_getOperand>
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
		 secondNumber=CALCULATOR_getOperand();
    1fda:	0e 94 a3 05 	call	0xb46	; 0xb46 <CALCULATOR_getOperand>
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	89 83       	std	Y+1, r24	; 0x01
		 CALCULATOR_CALCULATE(firstNumber , secondNumber);
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	29 81       	ldd	r18, Y+1	; 0x01
    1fe8:	3a 81       	ldd	r19, Y+2	; 0x02
    1fea:	b9 01       	movw	r22, r18
    1fec:	0e 94 80 06 	call	0xd00	; 0xd00 <CALCULATOR_CALCULATE>
    1ff0:	f0 cf       	rjmp	.-32     	; 0x1fd2 <main+0x10>

00001ff2 <__udivmodhi4>:
    1ff2:	aa 1b       	sub	r26, r26
    1ff4:	bb 1b       	sub	r27, r27
    1ff6:	51 e1       	ldi	r21, 0x11	; 17
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <__udivmodhi4_ep>

00001ffa <__udivmodhi4_loop>:
    1ffa:	aa 1f       	adc	r26, r26
    1ffc:	bb 1f       	adc	r27, r27
    1ffe:	a6 17       	cp	r26, r22
    2000:	b7 07       	cpc	r27, r23
    2002:	10 f0       	brcs	.+4      	; 0x2008 <__udivmodhi4_ep>
    2004:	a6 1b       	sub	r26, r22
    2006:	b7 0b       	sbc	r27, r23

00002008 <__udivmodhi4_ep>:
    2008:	88 1f       	adc	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	5a 95       	dec	r21
    200e:	a9 f7       	brne	.-22     	; 0x1ffa <__udivmodhi4_loop>
    2010:	80 95       	com	r24
    2012:	90 95       	com	r25
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	08 95       	ret

0000201a <__prologue_saves__>:
    201a:	2f 92       	push	r2
    201c:	3f 92       	push	r3
    201e:	4f 92       	push	r4
    2020:	5f 92       	push	r5
    2022:	6f 92       	push	r6
    2024:	7f 92       	push	r7
    2026:	8f 92       	push	r8
    2028:	9f 92       	push	r9
    202a:	af 92       	push	r10
    202c:	bf 92       	push	r11
    202e:	cf 92       	push	r12
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	ca 1b       	sub	r28, r26
    2044:	db 0b       	sbc	r29, r27
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	09 94       	ijmp

00002052 <__epilogue_restores__>:
    2052:	2a 88       	ldd	r2, Y+18	; 0x12
    2054:	39 88       	ldd	r3, Y+17	; 0x11
    2056:	48 88       	ldd	r4, Y+16	; 0x10
    2058:	5f 84       	ldd	r5, Y+15	; 0x0f
    205a:	6e 84       	ldd	r6, Y+14	; 0x0e
    205c:	7d 84       	ldd	r7, Y+13	; 0x0d
    205e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2060:	9b 84       	ldd	r9, Y+11	; 0x0b
    2062:	aa 84       	ldd	r10, Y+10	; 0x0a
    2064:	b9 84       	ldd	r11, Y+9	; 0x09
    2066:	c8 84       	ldd	r12, Y+8	; 0x08
    2068:	df 80       	ldd	r13, Y+7	; 0x07
    206a:	ee 80       	ldd	r14, Y+6	; 0x06
    206c:	fd 80       	ldd	r15, Y+5	; 0x05
    206e:	0c 81       	ldd	r16, Y+4	; 0x04
    2070:	1b 81       	ldd	r17, Y+3	; 0x03
    2072:	aa 81       	ldd	r26, Y+2	; 0x02
    2074:	b9 81       	ldd	r27, Y+1	; 0x01
    2076:	ce 0f       	add	r28, r30
    2078:	d1 1d       	adc	r29, r1
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	ed 01       	movw	r28, r26
    2086:	08 95       	ret

00002088 <itoa>:
    2088:	fb 01       	movw	r30, r22
    208a:	9f 01       	movw	r18, r30
    208c:	e8 94       	clt
    208e:	42 30       	cpi	r20, 0x02	; 2
    2090:	c4 f0       	brlt	.+48     	; 0x20c2 <itoa+0x3a>
    2092:	45 32       	cpi	r20, 0x25	; 37
    2094:	b4 f4       	brge	.+44     	; 0x20c2 <itoa+0x3a>
    2096:	4a 30       	cpi	r20, 0x0A	; 10
    2098:	29 f4       	brne	.+10     	; 0x20a4 <itoa+0x1c>
    209a:	97 fb       	bst	r25, 7
    209c:	1e f4       	brtc	.+6      	; 0x20a4 <itoa+0x1c>
    209e:	90 95       	com	r25
    20a0:	81 95       	neg	r24
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	64 2f       	mov	r22, r20
    20a6:	77 27       	eor	r23, r23
    20a8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__udivmodhi4>
    20ac:	80 5d       	subi	r24, 0xD0	; 208
    20ae:	8a 33       	cpi	r24, 0x3A	; 58
    20b0:	0c f0       	brlt	.+2      	; 0x20b4 <itoa+0x2c>
    20b2:	89 5d       	subi	r24, 0xD9	; 217
    20b4:	81 93       	st	Z+, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	a1 f7       	brne	.-24     	; 0x20a4 <itoa+0x1c>
    20bc:	16 f4       	brtc	.+4      	; 0x20c2 <itoa+0x3a>
    20be:	5d e2       	ldi	r21, 0x2D	; 45
    20c0:	51 93       	st	Z+, r21
    20c2:	10 82       	st	Z, r1
    20c4:	c9 01       	movw	r24, r18
    20c6:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <strrev>

000020ca <strrev>:
    20ca:	dc 01       	movw	r26, r24
    20cc:	fc 01       	movw	r30, r24
    20ce:	67 2f       	mov	r22, r23
    20d0:	71 91       	ld	r23, Z+
    20d2:	77 23       	and	r23, r23
    20d4:	e1 f7       	brne	.-8      	; 0x20ce <strrev+0x4>
    20d6:	32 97       	sbiw	r30, 0x02	; 2
    20d8:	04 c0       	rjmp	.+8      	; 0x20e2 <strrev+0x18>
    20da:	7c 91       	ld	r23, X
    20dc:	6d 93       	st	X+, r22
    20de:	70 83       	st	Z, r23
    20e0:	62 91       	ld	r22, -Z
    20e2:	ae 17       	cp	r26, r30
    20e4:	bf 07       	cpc	r27, r31
    20e6:	c8 f3       	brcs	.-14     	; 0x20da <strrev+0x10>
    20e8:	08 95       	ret

000020ea <_exit>:
    20ea:	f8 94       	cli

000020ec <__stop_program>:
    20ec:	ff cf       	rjmp	.-2      	; 0x20ec <__stop_program>
